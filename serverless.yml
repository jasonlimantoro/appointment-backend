# NOTE: update this with your service name
service: appointment-backend
tenant: 'jasonlimantoro'
app: 'appointment'

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-dynamodb-local
  - serverless-appsync-plugin
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  stage: ${self:provider.stage}
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  tableNames:
    guests: ${self:custom.stage}-guests
    entries: ${self:custom.stage}-entries
    sessions: ${self:custom.stage}-sessions
    photos: ${self:custom.stage}-photos
  webpack: ${file(plugins/webpack.yml):webpack}
  # Due to dynamodb-local bug, the configurations cannot be loaded from external file
  # dynamodb: ${file(plugins/dynamodb-local.yml):dynamodb}
  dynamodb:
    stages:
      - dev
    start:
      migrate: true
      seed: true
    seed:
      domain:
        sources:
          - table: dev-guests
            sources: 
              - ./fixtures/out/guests.js
          - table: dev-entries
            sources:
              - ./fixtures/out/entries.js
          - table: dev-photos
            sources:
              - ./fixtures/out/photos.js

provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'} # Set the default stage used. Default is dev
  region: ${opt:region, 'us-east-1'} # Overwrite the default region used. Default is us-east-1
  # To load environment variables externally
  # rename env.example to env.yml and uncomment
  # the following line. Also, make sure to not
  # commit your env.yml.
  #
  environment: ${file(env.yml):${self:provider.stage}}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        # Guest table
        - Fn::GetAtt: 
          - GuestTable
          - Arn
        # the firstName index
        - Fn::Join: 
            - '/' 
            -
              - Fn::GetAtt: 
                - GuestTable
                - Arn 
              - index
              - firstName-index

        # Entry table
        - Fn::GetAtt:
          - EntryTable
          - Arn
        # Session table
        - Fn::GetAtt:
          - SessionTable
          - Arn
functions:
  graphql:
    handler: graphql.hello
    events:
      - http:
          path: graphql
          method: post
          cors: true
          # authorizer: aws_iam
      - http:
          path: graphql
          method: get
          cors: true
          # authorizer: aws_iam
resources:
  # Dynamodb
  - ${file(resources/dynamodb.yml)}
  # Cognito user
  - ${file(resources/cognito-user.yml)}
  # Cognito identity
  - ${file(resources/cognito-identity.yml)}
  # IAM
  - ${file(resources/IAM.yml)}
  # S3 Bucket
  - ${file(resources/s3.yml)}
